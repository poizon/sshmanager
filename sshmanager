#!/usr/bin/env perl
# sshmanager (c) pkuptsov@gmail.com 2017
use common::sense;
use File::Path qw(make_path);
use Mojo::SQLite;
use Text::ANSITable;
###########################################
my $ssh_keygen = `which ssh-keygen`;
my $rsa_files  = $ENV{HOME} . '/.ssh/id_rsa.pub';
my $db_dir     = $ENV{HOME} . '/.sshmanager';
my $db_file    = 'dbmanager.db';

# make folder for database
unless ( -d $db_dir ) {
    make_path($db_dir);
}

my $sql = Mojo::SQLite->new( 'sqlite:' . $db_dir . '/' . $db_file )
  || die "Can't connect to DB: $!";

# init DB
$sql->migrations->from_data;
$sql->migrations->migrate(1);

# check alias column exists
my $alias_exists = map { /alias/i } @{ $sql->db->select('servers')->columns };
unless ($alias_exists) {
    $sql->migrations->migrate(2);
}

unless ( -e $rsa_files ) {
    say "Generate rsa keys";
    system( $ssh_keygen . " -t rsa -b 2048" );
}

# db handler
my $db = $sql->db;
REREAD:
my $server_pool = read_db($db);

clear();

START:

write_table($server_pool);

# check valid choise and save server for execute
my $server = check_server_exists(ask_user());

my $pid = fork();
die if not defined $pid;

if ( not $pid ) 
{
    exec("ssh $server");
}
else 
{
    clear();
    my $finished = wait();
    goto START;
}

##################### SUBS ###########################
sub read_db
{
    my $db = shift;
    my $results  = $db->select('servers');
    my @ssh_pool = ();

    # Process one row at a time
    while ( my $next = $results->hash ) 
    {
        push( @ssh_pool, $next );
    }
    return \@ssh_pool;
}

sub ask_user
{
    my $choose = <STDIN>;
    chomp($choose);

    say "Exit" and exit if ( $choose eq 'q' or $choose eq '0' );
    say "Add new" and add_new() if $choose eq 'n';
    say "Delete" and delete_server($1) if $choose =~ /^d\s+(\d+)/i;
    return $choose;
}

sub add_new {
    say "Enter hostname:";
    my $hostname = <STDIN>;
    chomp($hostname);
    say "Enter username:";
    my $username = <STDIN>;
    chomp($username);
    say "Enter comment:";
    my $alias = <STDIN>;
    chomp($alias);
    system("ssh-copy-id $username\@$hostname");

    $db->insert( 'servers',
        { server => "$username\@$hostname", alias => $alias } );
    goto REREAD;
}

sub delete_server {
    my $id = shift;
    my $server =
      $db->select( 'servers', ['server'], { ID => $id } )->hash->{SERVER};
    say "Delete server?(yes/no): $server";
    my $answer = <STDIN>;
    chomp($answer);
    return unless $answer eq 'yes';
    say "Deleting...";
    $db->delete( 'servers', { ID => $id } );
    goto REREAD;
}

sub clear {
    system("clear");
}

sub check_server_exists {
    my $id = shift;
    $id =~ s/[^0-9]+//g;
    say "Error choice" and goto START unless $id;
    my $server = $db->select( 'servers', ['server'], { ID => $id } )->hash;
    say "Error choice" and goto START unless $server;
    return $server->{SERVER};
}

sub write_table {

    my $ssh_pool = shift;

    # don't forget this if you want to output utf8 characters
    binmode(STDOUT, ":utf8");
     
    my $t = Text::ANSITable->new;
     
    # set styles
    $t->border_style('Default::bold');  # if not, a nice default is picked
    $t->color_theme('Default::no_color');  # if not, a nice default is picked
    # fill data
    $t->columns(["ID"       , "Server" , "Comment"]);
    
    for my $server (@{$ssh_pool}) 
    {
        $t->add_row([$server->{ID}, $server->{SERVER},    $server->{ALIAS}]) if $server->{ID} > 0;
    }
    
    print $t->draw;

    $t = Text::ANSITable->new;
    $t->columns(["n - new connection, d [num] - delete connection, q - quit"]); 
    # draw it!
    print $t->draw;
}

__DATA__
@@ migrations
-- 1 up
create table if not exists servers (
ID INTEGER PRIMARY KEY AUTOINCREMENT,
SERVER TEXT,
ALIAS TEXT
);
INSERT INTO servers(ID,SERVER) VALUES(0,'exit');
-- 1 down
drop table if exists servers;
-- 2 up
ALTER TABLE servers ADD COLUMN ALIAS TEXT;
