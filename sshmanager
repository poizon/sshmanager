#!/usr/bin/env perl
# sshmanager (c) pkuptsov@gmail.com 2017-2023
use feature    qw(say);
use File::Path qw(make_path);
use Mojo::SQLite;
use Text::ANSITable;
###########################################
my $VERSION    = "1.3";
my $ssh_keygen = `which ssh-keygen`;
my $rsa_files  = $ENV{HOME} . '/.ssh/id_rsa.pub';
my $db_dir     = $ENV{HOME} . '/.sshmanager';
my $db_file    = 'dbmanager.db';

# don't forget this if you want to output utf8 characters
binmode( STDOUT, ":utf8" );

# make folder for database
unless ( -d $db_dir ) {
    make_path($db_dir);
}

my $sql = Mojo::SQLite->new( 'sqlite:' . $db_dir . '/' . $db_file )
    || die "Can't connect to DB: $!";

# init DB
$sql->migrations->from_data;
$sql->migrations->migrate(1);

# check alias column exists
my $columns = $sql->db->query('PRAGMA table_info(servers)')->hashes->to_array;

my $alias_exists  = map { $_->{name} =~ /alias/i } @$columns;
my $sshkey_exists = map { $_->{name} =~ /sshkey/i } @$columns;

unless ($alias_exists) {
    $sql->migrations->migrate(2);
}

unless ($sshkey_exists) {
    my $migrate_command = $sql->migrations->sql_for( 2, 3 );
    $sql->db->query($migrate_command);
}

unless ( -e $rsa_files ) {
    say "Generate rsa keys";
    system( $ssh_keygen . " -t rsa -b 2048" );
}

# db handler
my $db = $sql->db;

REREAD:
my $server_pool = read_db();

clear();

START:

write_table($server_pool);

# check valid choise and save server for execute
my ( $server, $ssh_key ) = check_server_exists( ask_user() );

my $pid = fork();
die if not defined $pid;

if ( not $pid ) {
    exec("ssh -i $ssh_key $server");
}
else {
    clear();
    my $finished = wait();
    goto START;
}

##################### SUBS ###########################
sub read_db {
    my $results  = $db->select('servers');
    my @ssh_pool = ();

    # Process one row at a time
    while ( my $next = $results->hash ) {
        push( @ssh_pool, $next );
    }
    return \@ssh_pool;
}

sub ask_user {
    chomp( my $choice = <STDIN> );
    say "Exit"    and exit      if ( $choice eq 'q' or $choice eq '0' );
    say "Add new" and add_new() if $choice eq 'n';
    say "Delete"  and delete_server($1) if $choice =~ /^d\s+(\d+)/i;
    return search_server($1) if $choice =~ /^s\s+(.+)/i;
    return $choice;
}

sub add_new {
    say "Enter hostname:";
    chomp( my $hostname = <STDIN> );
    say "Enter username:";
    chomp( my $username = <STDIN> );
    say "Enter comment:";
    chomp( my $alias = <STDIN> );
    say "Use alternative key (default id_rsa):";
    chomp( my $ssh_key = <STDIN> );
    system("ssh-copy-id $username\@$hostname");

    $db->insert(
        'servers',
        {   server => "$username\@$hostname",
            alias  => $alias,
            sshkey => $ssh_key || 'id_rsa.pub'
        }
    );
    goto REREAD;
}

sub delete_server {
    my $id = shift;
    my $server_to_del
        = $db->select( 'servers', ['server'], { ID => $id } )->hash->{SERVER};
    say "Delete server?(yes/no): $server_to_del";
    chomp( my $answer = <STDIN> );

    return unless $answer eq 'yes';
    say "Deleting...";
    $db->delete( 'servers', { ID => $id } );

    goto REREAD;
}

sub search_server {
    my $search        = shift;
    my $search_str    = '%' . $search . '%';
    my $server_search = $db->query(
        qq{ select * from servers where server like ?
                                       or alias like ? }, $search_str,
        $search_str
    )->hashes->to_array;

    goto START if scalar @$server_search == 0;

    return $server_search->[0]->{ID} if scalar @$server_search == 1;

    my $t = eval { Text::ANSITable->new };
    $t->use_utf8(1);
    $t->apply_style_set(
        "AltRow",
        odd_bgcolor  => "795548",
        even_bgcolor => "000000"
    );
    $t->columns( [ "ID", "Server", "Comment", "SSH Key" ] );
    for my $serv (@$server_search) {
        $t->add_row( [ $serv->{ID}, $serv->{SERVER}, $serv->{ALIAS}, $serv->{SSHKEY} ] );
    }
    print $t->draw;
    my $ids_string = join ',', map { $_->{ID} } @$server_search;
    print "Select ID for connect:[ $ids_string]\n";

    chomp( my $choice = <STDIN> );
    say "Exit" and exit      if ( $choice eq 'q' or $choice eq '0' );
    return search_server($1) if $choice =~ /^s\s+(.+)/i;

    return $choice;
}

sub clear {
    system("clear");
}

sub check_server_exists {
    my $id = shift;
    $id =~ s/[^0-9]+//g;
    say "Error choice" and goto START unless $id;
    my $server_exist
        = $db->select( 'servers', [ 'server', 'sshkey' ], { ID => $id } )
        ->hash;
    say "Error choice" and goto START unless $server_exist;
    return ( $server_exist->{SERVER},
        sprintf( "%s%s%s", $ENV{HOME}, '/.ssh/', $server_exist->{SSHKEY} ) );
}

sub write_table {
    my $ssh_pool = shift;
    my $t        = eval { Text::ANSITable->new };

    if ( $^O eq "linux" ) {
        $t->border_style('UTF8::SingleLineBold');
        $t->color_theme('Standard::NoGradation');
    }

    # set styles
    $t->use_utf8(1);    # fix utf8
    $t->apply_style_set(
        "AltRow",
        odd_bgcolor  => "795548",
        even_bgcolor => "000000"
    );

    # fill data
    $t->columns( [ "ID", "Server", "Comment" , "SSH Key"] );
    for my $serv ( @{$ssh_pool} ) {
        $t->add_row( [ $serv->{ID}, $serv->{SERVER}, $serv->{ALIAS}, $serv->{SSHKEY} ] )
            if $serv->{ID} > 0;
    }
    print $t->draw;

    $t = eval { Text::ANSITable->new };
    $t->use_utf8(1);    # fix utf8
    $t->apply_style_set(
        "AltRow",
        odd_bgcolor  => "795548",
        even_bgcolor => "000000"
    );
    $t->columns(
        ["n - new connection, d [num] - delete connection, q - quit"] );
    $t->add_row( ["s [string to search] - search in list"] );

    # draw it!
    print $t->draw;
}

__DATA__
@@ migrations
-- 1 up
create table if not exists servers (
ID INTEGER PRIMARY KEY AUTOINCREMENT,
SERVER TEXT,
ALIAS TEXT,
SSHKEY TEXT DEFAULT('id_rsa')
);
INSERT INTO servers(ID,SERVER) VALUES(0,'exit');
-- 1 down
drop table if exists servers;
-- 2 up
ALTER TABLE servers ADD COLUMN ALIAS TEXT;
-- 3 up
ALTER TABLE servers ADD COLUMN SSHKEY TEXT DEFAULT('id_rsa');
